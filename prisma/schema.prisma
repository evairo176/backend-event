generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TYPE_USER {
  TENANT
  REGISTER
}

enum ROLE_USER {
  admin
  member
  manager
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  // Tambahkan sesuai kebutuhanmu
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  fullname        String
  username        String     @unique
  email           String     @unique
  password        String
  role            ROLE_USER? @default(member)
  profilePicture  String     @default("user.jpg")
  activationCode  String?
  isEmailVerified Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // relation
  banners           Banner[]           @relation("CreatedBanners")
  updatedBanners    Banner[]           @relation("UpdatedBanners")
  tickets           Ticket[]           @relation("CreatedTickets")
  updatedTickets    Ticket[]           @relation("UpdatedTickets")
  events            Event[]            @relation("CreatedEvents")
  updatedEvents     Event[]            @relation("UpdatedEvents")
  categories        Category[]         @relation("CreatedCategories")
  updatedCategories Category[]         @relation("UpdatedCategories")
  userPreferences   UserPreferences?
  sessions          Session[]
  verificationCodes VerificationCode[] // Relasi 1:N
}

model UserPreferences {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  enable2FA         Boolean @default(false)
  emailNotification Boolean @default(true)
  twoFactorSecret   String?

  // relation
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userAgent String?
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model VerificationCode {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  code      String           @unique
  type      VerificationType
  createdAt DateTime         @default(now())
  expiresAt DateTime

  @@map("verification_codes") // agar sesuai dengan collection MongoDB lama
}

model ErrorLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  stack      String?
  method     String
  path       String
  code       String?
  meta       String?
  statusCode Int?
  createdAt  DateTime @default(now())
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  icon        String

  events Event[]

  createdBy   User?    @relation("CreatedCategories", fields: [createById], references: [id])
  createById  String?  @db.ObjectId
  updatedBy   User?    @relation("UpdatedCategories", fields: [updatedById], references: [id])
  updatedById String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  startDate   String
  endDate     String
  description String
  banner      String
  isFeatured  Boolean
  isOnline    Boolean
  isPublished Boolean @default(false)
  slug        String  @unique
  address     String?
  longitude   Float?
  latitude    Float?

  // relation
  createdBy   User?     @relation("CreatedEvents", fields: [createById], references: [id])
  createById  String?   @db.ObjectId
  updatedBy   User?     @relation("UpdatedEvents", fields: [updatedById], references: [id])
  updatedById String?   @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @db.ObjectId
  city        Regency?  @relation(fields: [regionId], references: [code])
  regionId    String?

  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String
  quantity    Int
  // relation
  createdBy   User?    @relation("CreatedTickets", fields: [createById], references: [id])
  createById  String?  @db.ObjectId
  updatedBy   User?    @relation("UpdatedTickets", fields: [updatedById], references: [id])
  updatedById String?  @db.ObjectId
  event       Event?   @relation(fields: [eventId], references: [id])
  eventId     String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, eventId])
}

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  image       String
  isShow      Boolean
  // relation
  createdBy   User?    @relation("CreatedBanners", fields: [createById], references: [id])
  createById  String?  @db.ObjectId
  updatedBy   User?    @relation("UpdatedBanners", fields: [updatedById], references: [id])
  updatedById String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Province {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  code      String    @unique
  name      String
  regencies Regency[]
}

model Regency {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  code       String     @unique
  name       String
  province   Province   @relation(fields: [provinceId], references: [id])
  provinceId String     @db.ObjectId
  districts  District[]
  Events     Event[]
}

model District {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  code      String    @unique
  name      String
  regency   Regency   @relation(fields: [regencyId], references: [id])
  regencyId String    @db.ObjectId
  villages  Village[]
}

model Village {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  name       String
  district   District @relation(fields: [districtId], references: [id])
  districtId String   @db.ObjectId
}
