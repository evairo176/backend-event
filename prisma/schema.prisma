generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TYPE_USER {
  TENANT
  REGISTER
}

enum ROLE_USER {
  admin
  member
  manager
}


enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  // Tambahkan sesuai kebutuhanmu
}

model User {
  id               String            @id @map("_id") @default(auto()) @db.ObjectId
  fullname         String
  username         String            @unique
  email            String            @unique
  password         String
  role             ROLE_USER?    @default(member)
  profilePicture         String @default("user.jpg")
  activationCode         String?
  isEmailVerified  Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

    // relation
  userPreferences  UserPreferences?
  sessions         Session[]
  verificationCodes VerificationCode[] // Relasi 1:N
}

model UserPreferences {
  id                String   @id @map("_id") @default(auto()) @db.ObjectId
  enable2FA         Boolean  @default(false)
  emailNotification Boolean  @default(true)
  twoFactorSecret   String?

  // relation
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique @db.ObjectId
}

model Session {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userAgent  String?
  createdAt  DateTime @default(now())
  expiredAt  DateTime
}

model VerificationCode {
  id         String            @id @map("_id") @default(auto()) @db.ObjectId
  userId     String            @db.ObjectId
  user       User              @relation(fields: [userId], references: [id])
  code       String            @unique
  type       VerificationType
  createdAt  DateTime          @default(now())
  expiresAt  DateTime

  @@map("verification_codes") // agar sesuai dengan collection MongoDB lama
}

model ErrorLog {
  id         String            @id @map("_id") @default(auto()) @db.ObjectId
  message    String
  stack      String?
  method     String
  path       String
  statusCode Int?
  createdAt  DateTime @default(now())
}

model Category {
  id         String            @id @map("_id") @default(auto()) @db.ObjectId
  name   String @unique
  description String?
  icon  String

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Province {
  id        String     @id @map("_id") @default(auto()) @db.ObjectId
  code      String     @unique
  name      String
  regencies Regency[]
}

model Regency {
  id         String     @id @map("_id") @default(auto()) @db.ObjectId
  code       String     @unique
  name       String
  province   Province   @relation(fields: [provinceId], references: [id])
  provinceId String     @db.ObjectId
  districts  District[]
}

model District {
  id        String     @id @map("_id") @default(auto()) @db.ObjectId
  code      String     @unique
  name      String
  regency   Regency    @relation(fields: [regencyId], references: [id])
  regencyId String     @db.ObjectId
  villages  Village[]
}

model Village {
  id         String  @id @map("_id") @default(auto()) @db.ObjectId
  code       String  @unique
  name       String
  district   District @relation(fields: [districtId], references: [id])
  districtId String   @db.ObjectId
}